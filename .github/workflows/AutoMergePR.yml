name: Auto-MergePR

on:
  pull_request:
    types:
      - opened     # PR 被创建时触发
      - synchronize # PR 更新时触发（例如，提交新的代码）
      - reopened    # PR 被重新打开时触发

jobs:
  merge:
    runs-on: ubuntu-latest

    permissions:
      contents: read  # 读取仓库内容
      pull-requests: write  # 允许修改 PR
      issues: read  # 读取 Issues 信息
      # 你可以根据需要添加更多的权限

    steps:
      # 第一步：检查出代码
      - name: 检出代码
        uses: actions/checkout@v4  # 使用 GitHub 官方提供的检出代码的 action

      # 第二步：安装 GitHub CLI
      - name: 安装 GitHub CLI
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.11.0/gh_2.11.0_linux_amd64.deb -o gh.deb
          sudo dpkg -i gh.deb
          sudo apt-get install -f  # 解决任何缺少的依赖

      # 第三步：登录 GitHub CLI
      - name: 登录到 GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      # 第四步：检查 PR 是否包含 Auto-merge 标签
      - name: 检查 PR 是否包含 Auto-merge 标签
        run: |
          # 获取 PR 的标签列表
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q ".labels[].name")
          
          # 检查标签是否包含 'Auto-merge'
          if echo "$LABELS" | grep -q "Auto-merge"; then
            echo "PR 包含 Auto-merge 标签，继续合并"
          else
            echo "PR 不包含 Auto-merge 标签，跳过合并"
            exit 1  # 如果没有包含 'Auto-merge' 标签，停止后续步骤
          fi

      # 第五步：检查 PR 创建者是否是仓库持有者
      - name: 检查 PR 创建者是否是仓库持有者
        run: |
          # 获取仓库信息，提取仓库所有者
          REPO_OWNER=$(gh repo view ${{ github.repository }} --json owner -q ".owner.login")

          # 获取 PR 创建者的用户名
          PR_CREATOR=${{ github.event.pull_request.user.login }}

          # 比较 PR 创建者与仓库所有者
          if [ "$REPO_OWNER" == "$PR_CREATOR" ]; then
            echo "PR 创建者是仓库持有者，继续合并"
          else
            echo "PR 创建者不是仓库持有者，跳过合并"
            exit 1  # 如果创建者不是仓库持有者，停止后续步骤
          fi

      # 第六步：检查 PR 是否准备好合并
      - name: 检查 PR 是否准备好合并
        run: |
          # 使用 GitHub CLI 获取 PR 的审查状态
          PR_STATUS=$(gh pr view ${{ github.event.pull_request.number }} --json reviews -q ".reviews[].state")

          # 这里检查 PR 是否已经获得批准
          if echo "$PR_STATUS" | grep -q "APPROVED"; then
            echo "PR 已经批准，准备合并"
          else
            echo "PR 未批准，跳过合并"
            exit 1  # 如果未通过审批，停止执行后续步骤
          fi

      # 第七步：执行合并操作
      - name: 自动合并 PR
        if: success()  # 只有前面的步骤都成功时才会执行此步骤
        run: |
          # 使用 GitHub CLI 执行 PR 合并
          gh pr merge ${{ github.event.pull_request.number }} --merge --auto --delete-branch
          echo "PR 已合并"
